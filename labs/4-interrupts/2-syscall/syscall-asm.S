#include "rpi-asm.h"

MK_FN(syscall_hello)
    @ we are already at system level: running this will trash
    @ the lr, so we need to save it.
    push {lr}
    swi 1
    pop {lr}
    bx lr

@ your code should reject this call with an error.
MK_FN(syscall_illegal)
    push {lr}
    swi 2
    pop {lr}
    bx lr

@ void run_user_code_asm(uint32_t pc, uint32_t stack)
@
@ utility routine:
@   1. switch to user mode, 
@   2. set setting <sp> to <stack>
@   3. jump to the address in <pc> 
@ 
@ recall:
@   - pc is passed in r0
@   - stack passed in r1
@
@ look at notes/mode-bugs for examples on what to do
@    - change modes using the cps instruction.
@
@ does not return
MK_FN(run_user_code_asm)
    @ user mode rn
    @SRS
    @push {r0-r11}
    CPS #0b10000 @user mode
    @prefetch_flush(r0) @ get function addr, TODO: why does this prefetch fuck it up
    prefetch_flush(r2) @ get stack addr
    mov sp, r1 
    mov pc, r0
    @blx r0
    @pop {r0-r11}
    bl clean_reboot @ what is this
